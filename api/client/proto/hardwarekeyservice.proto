// Copyright 2022 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package proto;

// AttestHardwarePrivateKeyRequest is a request to AttestHardwarePrivateKey.
message AttestHardwarePrivateKeyRequest {
    // attestation_request is an attestation request for a hardware private key. The data
    // necessary for the request is dependent on the hardware key in question.
    oneof attestation_request {
        // yubikey_attestation_request is a request to attest a specific Yubikey PIV slot.
        YubikeyAttestationRequest yubikey_attestation_request = 1;
    }
}

// YubikeyAttestationRequest is data used to attest a specific Yubikey PIV slot.
message YubikeyAttestationRequest {
    // slot_cert is a certificate signed by the yubikey's attestation certificate using the slot's
    // public key.
    bytes slot_cert = 1;

    // attestation_cert is the attestation certificate signed by a Yubikey CA for the yubikey in
    // question.
    bytes attestation_cert = 2;
}

// AttestHardwarePrivateKeyResponse is a response to AttestHardwarePrivateKey.
message AttestHardwarePrivateKeyResponse {}

// GetPrivateKeyPolicyRequest is a request to GetPrivateKeyPolicy.
message GetPrivateKeyPolicyRequest {}

// GetPrivateKeyPolicyResponse is a response to GetPrivateKeyPolicy.
message GetPrivateKeyPolicyResponse {
    // policy is the private key policy enforced for the current user.
    PrivateKeyPolicy policy = 1;
}

// PrivateKeyPolicy is a private key mode required for a client.
enum PrivateKeyPolicy {
    // PRIVATE_KEY_POLICY_NONE means that the client can store their private keys
    // anywhere (usually on disk).
    PRIVATE_KEY_POLICY_NONE = 0;

    // PRIVATE_KEY_POLICY_HARDWARE_KEY means that the client must use a valid
    // hardware key to generate and store their private keys securely.
    PRIVATE_KEY_POLICY_HARDWARE_KEY = 1;

    // PRIVATE_KEY_POLICY_HARDWARE_KEY means that the client must use a valid
    // hardware key to generate and store their private keys securely, and
    // this key must require touch to be accessed and used.
    PRIVATE_KEY_POLICY_HARDWARE_KEY_TOUCH = 2;
}

// HardwareKeyService is authentication/authorization service implementation
service HardwareKeyService {
    // AttestHardwarePrivateKey is used to perform a server-side attestation check for a
    // hardware-backed private key.
    rpc AttestHardwarePrivateKey(AttestHardwarePrivateKeyRequest)
        returns (AttestHardwarePrivateKeyResponse);

    // GetPrivateKeyPolicy is used to find a user's private key storage requirements.
    rpc GetPrivateKeyPolicy(GetPrivateKeyPolicyRequest) returns (GetPrivateKeyPolicyResponse);
}